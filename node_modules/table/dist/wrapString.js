'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var cov_2j1tsrxplw = function () {
  var path = '/Users/gajuskuizinas/Documents/dev/gajus/table/src/wrapString.js',
      hash = '15b178ad978dad5acb4b258f96afd96dfca6bd54',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/gajuskuizinas/Documents/dev/gajus/table/src/wrapString.js',
    statementMap: {
      '0': {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 19,
          column: 25
        }
      },
      '1': {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 19
        }
      },
      '2': {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 27,
          column: 38
        }
      },
      '3': {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 46
        }
      },
      '4': {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 53
        }
      },
      '5': {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 16
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 16
          }
        },
        loc: {
          start: {
            line: 16,
            column: 34
          },
          end: {
            line: 30,
            column: 1
          }
        }
      }
    },
    branchMap: {},
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0
    },
    f: {
      '0': 0
    },
    b: {}
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _sliceAnsi = require('slice-ansi');

var _sliceAnsi2 = _interopRequireDefault(_sliceAnsi);

var _stringWidth = require('string-width');

var _stringWidth2 = _interopRequireDefault(_stringWidth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates an array of strings split into groups the length of size.
 * This function works with strings that contain ASCII characters.
 *
 * wrapText is different from would-be "chunk" implementation
 * in that whitespace characters that occur on a chunk size limit are trimmed.
 *
 * @param {string} subject
 * @param {number} size
 * @returns {Array}
 */
exports.default = (subject, size) => {
  ++cov_2j1tsrxplw.f[0];

  let subjectSlice;

  ++cov_2j1tsrxplw.s[0];
  subjectSlice = subject;

  const chunks = (++cov_2j1tsrxplw.s[1], []);

  ++cov_2j1tsrxplw.s[2];
  do {
    ++cov_2j1tsrxplw.s[3];

    chunks.push((0, _sliceAnsi2.default)(subjectSlice, 0, size));

    ++cov_2j1tsrxplw.s[4];
    subjectSlice = _lodash2.default.trim((0, _sliceAnsi2.default)(subjectSlice, size));
  } while ((0, _stringWidth2.default)(subjectSlice));

  ++cov_2j1tsrxplw.s[5];
  return chunks;
};

module.exports = exports['default'];