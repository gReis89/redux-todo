'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var cov_kv3pae3nh = function () {
  var path = '/Users/gajuskuizinas/Documents/dev/gajus/table/src/getBorderCharacters.js',
      hash = '27cb59a70836f8e003ebb1cb52aadbf09dab946f',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/gajuskuizinas/Documents/dev/gajus/table/src/getBorderCharacters.js',
    statementMap: {
      '0': {
        start: {
          line: 27,
          column: 2
        },
        end: {
          line: 48,
          column: 3
        }
      },
      '1': {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 47,
          column: 6
        }
      },
      '2': {
        start: {
          line: 50,
          column: 2
        },
        end: {
          line: 71,
          column: 3
        }
      },
      '3': {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 70,
          column: 6
        }
      },
      '4': {
        start: {
          line: 73,
          column: 2
        },
        end: {
          line: 94,
          column: 3
        }
      },
      '5': {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 93,
          column: 6
        }
      },
      '6': {
        start: {
          line: 96,
          column: 2
        },
        end: {
          line: 117,
          column: 3
        }
      },
      '7': {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 116,
          column: 6
        }
      },
      '8': {
        start: {
          line: 119,
          column: 2
        },
        end: {
          line: 119,
          column: 61
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 16
          }
        },
        loc: {
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 120,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        }, {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 50,
            column: 2
          },
          end: {
            line: 71,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 50,
            column: 2
          },
          end: {
            line: 71,
            column: 3
          }
        }, {
          start: {
            line: 50,
            column: 2
          },
          end: {
            line: 71,
            column: 3
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 73,
            column: 2
          },
          end: {
            line: 94,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 73,
            column: 2
          },
          end: {
            line: 94,
            column: 3
          }
        }, {
          start: {
            line: 73,
            column: 2
          },
          end: {
            line: 94,
            column: 3
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 96,
            column: 2
          },
          end: {
            line: 117,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 96,
            column: 2
          },
          end: {
            line: 117,
            column: 3
          }
        }, {
          start: {
            line: 96,
            column: 2
          },
          end: {
            line: 117,
            column: 3
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0
    },
    f: {
      '0': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0]
    }
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

/* eslint-disable sort-keys */

/**
 * @typedef border
 * @property {string} topBody
 * @property {string} topJoin
 * @property {string} topLeft
 * @property {string} topRight
 * @property {string} bottomBody
 * @property {string} bottomJoin
 * @property {string} bottomLeft
 * @property {string} bottomRight
 * @property {string} bodyLeft
 * @property {string} bodyRight
 * @property {string} bodyJoin
 * @property {string} joinBody
 * @property {string} joinLeft
 * @property {string} joinRight
 * @property {string} joinJoin
 */

/**
 * @param {string} name
 * @returns {border}
 */
exports.default = name => {
  ++cov_kv3pae3nh.f[0];
  ++cov_kv3pae3nh.s[0];

  if (name === 'honeywell') {
    ++cov_kv3pae3nh.b[0][0];
    ++cov_kv3pae3nh.s[1];

    return {
      topBody: '═',
      topJoin: '╤',
      topLeft: '╔',
      topRight: '╗',

      bottomBody: '═',
      bottomJoin: '╧',
      bottomLeft: '╚',
      bottomRight: '╝',

      bodyLeft: '║',
      bodyRight: '║',
      bodyJoin: '│',

      joinBody: '─',
      joinLeft: '╟',
      joinRight: '╢',
      joinJoin: '┼'
    };
  } else {
    ++cov_kv3pae3nh.b[0][1];
  }

  ++cov_kv3pae3nh.s[2];
  if (name === 'norc') {
    ++cov_kv3pae3nh.b[1][0];
    ++cov_kv3pae3nh.s[3];

    return {
      topBody: '─',
      topJoin: '┬',
      topLeft: '┌',
      topRight: '┐',

      bottomBody: '─',
      bottomJoin: '┴',
      bottomLeft: '└',
      bottomRight: '┘',

      bodyLeft: '│',
      bodyRight: '│',
      bodyJoin: '│',

      joinBody: '─',
      joinLeft: '├',
      joinRight: '┤',
      joinJoin: '┼'
    };
  } else {
    ++cov_kv3pae3nh.b[1][1];
  }

  ++cov_kv3pae3nh.s[4];
  if (name === 'ramac') {
    ++cov_kv3pae3nh.b[2][0];
    ++cov_kv3pae3nh.s[5];

    return {
      topBody: '-',
      topJoin: '+',
      topLeft: '+',
      topRight: '+',

      bottomBody: '-',
      bottomJoin: '+',
      bottomLeft: '+',
      bottomRight: '+',

      bodyLeft: '|',
      bodyRight: '|',
      bodyJoin: '|',

      joinBody: '-',
      joinLeft: '|',
      joinRight: '|',
      joinJoin: '|'
    };
  } else {
    ++cov_kv3pae3nh.b[2][1];
  }

  ++cov_kv3pae3nh.s[6];
  if (name === 'void') {
    ++cov_kv3pae3nh.b[3][0];
    ++cov_kv3pae3nh.s[7];

    return {
      topBody: '',
      topJoin: '',
      topLeft: '',
      topRight: '',

      bottomBody: '',
      bottomJoin: '',
      bottomLeft: '',
      bottomRight: '',

      bodyLeft: '',
      bodyRight: '',
      bodyJoin: '',

      joinBody: '',
      joinLeft: '',
      joinRight: '',
      joinJoin: ''
    };
  } else {
    ++cov_kv3pae3nh.b[3][1];
  }

  ++cov_kv3pae3nh.s[8];
  throw new Error('Unknown border template "' + name + '".');
};

module.exports = exports['default'];